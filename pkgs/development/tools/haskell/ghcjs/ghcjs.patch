diff --git a/src-bin/Boot.hs b/src-bin/Boot.hs
index 2ed8b4c..e5c05f9 100644
--- a/src-bin/Boot.hs
+++ b/src-bin/Boot.hs
@@ -510,9 +510,7 @@ initPackageDB :: B ()
 initPackageDB = do
   msg info "creating package databases"
   initDB "--global" <^> beLocations . blGlobalDB
-  traverseOf_ _Just initUser <^> beLocations . blUserDBDir
   where
-    initUser dir = rm_f (dir </> "package.conf") >> initDB "--user" (dir </> "package.conf.d")
     initDB dbName db = do
       rm_rf db >> mkdir_p db
       ghcjs_pkg_ ["init", toTextI db] `catchAny_` return ()
@@ -536,29 +534,21 @@ installDevelopmentTree = subTop $ do
   msgD info $ "preparing development boot tree"
   checkpoint' "ghcjs-boot-git" "ghcjs-boot repository already cloned and prepared" $ do
     testGit "ghcjs-boot" >>= \case
-      Just False -> failWith "ghcjs-boot already exists and is not a git repository"
-      Just True  -> do
-        msg info "ghcjs-boot repository already exists but checkpoint not reached, cleaning first, then cloning"
-        rm_rf "ghcjs-boot"
-        initGhcjsBoot
+      Just _ -> do
+        msg info "ghcjs-boot repository already exists; initializing ghcjs-boot"
       Nothing    -> do
         msgD info "cloning ghcjs-boot git repository"
         initGhcjsBoot
   checkpoint' "shims-git" "shims repository already cloned" $ do
     testGit "shims" >>= \case
-      Just False -> failWith "shims already exists and is not a git repository"
-      Just True  -> do
-        msgD info "shims repository already exists but checkpoint not reached, cleaning first, then cloning"
-        rm_rf "shims"
-        cloneGit shimsDescr "shims" bsrcShimsDevBranch bsrcShimsDev
+      Just _ -> do
+        msgD info "shims repository already exists; moving on"
       Nothing    -> do
         msgD info "cloning shims git repository"
         cloneGit shimsDescr "shims" bsrcShimsDevBranch bsrcShimsDev
   where
     initGhcjsBoot = sub $ do
-      cloneGit bootDescr "ghcjs-boot"  bsrcBootDevBranch bsrcBootDev
       cd "ghcjs-boot"
-      git_ ["submodule", "update", "--init", "--recursive"]
       mapM_ patchPackage =<< allPackages
       preparePrimops
       buildGenPrim
@@ -1093,7 +1083,9 @@ cabalInstallFlags parmakeGhcjs = do
            , "--builddir",      "dist"
            , "--with-compiler", ghcjs ^. pgmLocText
            , "--with-hc-pkg",   ghcjsPkg ^. pgmLocText
-           , "--prefix",        toTextI instDir
+           , "--prefix",        "@PREFIX@"
+           , "--libdir",        "$prefix/lib/$compiler"
+           , "--libsubdir",     "$pkgid"
            , bool haddock "--enable-documentation" "--disable-documentation"
            , "--haddock-html"
            , "--haddock-hoogle"
diff --git a/src/Compiler/Info.hs b/src/Compiler/Info.hs
index af3ca88..4779fb7 100644
--- a/src/Compiler/Info.hs
+++ b/src/Compiler/Info.hs
@@ -48,7 +48,7 @@ compilerInfo nativeToo dflags = do
 -- | the directory to use if started without -B flag
 getDefaultTopDir :: IO FilePath
 getDefaultTopDir = do
-  appdir <- getAppUserDataDirectory "ghcjs"
+  let appdir = "@PREFIX@/share/ghcjs"
   return (appdir </> subdir </> "ghcjs")
       where
         targetARCH = arch
@@ -85,7 +85,7 @@ getGlobalPackageDB :: FilePath
 getGlobalPackageDB libDir = libDir </> "package.conf.d"
 
 getUserTopDir :: IO (Maybe FilePath)
-getUserTopDir = fmap Just getUserTopDir' `E.catch` 
+getUserTopDir = fmap Just getUserTopDir' `E.catch`
                    \(E.SomeException _) -> return Nothing
 
 getUserTopDir' :: IO FilePath -- (Maybe FilePath)
